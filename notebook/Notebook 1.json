{
	"name": "Notebook 1",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "movielensApache",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "d381bfb4-4316-4ed4-b6ab-e4a36037d11c"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/8118bf43-f026-4636-9ec2-b8176d4c5249/resourceGroups/Movielens_project/providers/Microsoft.Synapse/workspaces/movielensproject-asa/bigDataPools/movielensApache",
				"name": "movielensApache",
				"type": "Spark",
				"endpoint": "https://movielensproject-asa.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/movielensApache",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.2",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					},
					"collapsed": false
				},
				"source": [
					"%%pyspark\r\n",
					"df_business_review = spark.read.load('abfss://data@movielensprojectdatalake.dfs.core.windows.net/cleanData/business', format='parquet')\r\n",
					"df_user = spark.read.load('abfss://data@movielensprojectdatalake.dfs.core.windows.net/cleanData/user/user', format='parquet')\r\n",
					""
				],
				"execution_count": 14
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_business_review = df_business_review.distinct()\r\n",
					"df_user = df_user.distinct()\r\n",
					""
				],
				"execution_count": 15
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_business_review.count()\r\n",
					""
				],
				"execution_count": 16
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_user.count()"
				],
				"execution_count": 17
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pandas as pd\r\n",
					"df_business_review = df_business_review.select('*').toPandas()\r\n",
					"df_user = df_user.select('*').toPandas()"
				],
				"execution_count": 18
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_business_review.sample(10)"
				],
				"execution_count": 19
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_user.sample(10)"
				],
				"execution_count": 20
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"yelp_df = pd.merge(df_business_review,df_user,how='inner',on='user_id')"
				],
				"execution_count": 21
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"yelp_df.columns"
				],
				"execution_count": 22
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"map_columns  = {'name_x':'vendor_name',\r\n",
					"                'stars':'vendor_stars',\r\n",
					"                'review_count_x':'vendor_review_count',\r\n",
					"                'VendorPerCity':'vendor_per_city',\r\n",
					"                'useful_x':'comment_useful',\r\n",
					"                'funny_x':'comment_funny',\r\n",
					"                'cool_x':'comment_cool',\r\n",
					"                'text':'comment',\r\n",
					"                'name_y':'user_name',\r\n",
					"                'review_count_y':'user_review_count',\r\n",
					"                'useful_y':'user_useful',\r\n",
					"                'funny_y':'user_funny',\r\n",
					"                'cool_y':'user_cool',\r\n",
					"                }\r\n",
					"\r\n",
					"yelp_df = yelp_df.rename(columns=map_columns)"
				],
				"execution_count": 23
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"yelp_df.columns"
				],
				"execution_count": 24
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"cats = yelp_df['categories']\r\n",
					"cats = cats.drop_duplicates()\r\n",
					"cats = ','.join(cats)\r\n",
					"cats = cats.split(',')\r\n",
					"cats = [x.lower().strip() for x in cats]\r\n",
					"cats = pd.DataFrame(cats).value_counts().to_dict()\r\n",
					"cats"
				],
				"execution_count": 25
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"keys = []\r\n",
					"for words in list(cats.keys()):\r\n",
					"    keys.append(words[0])\r\n",
					"\r\n",
					"vals = list(cats.values())\r\n",
					"\r\n",
					"cats_unique_occurance = dict(zip(keys,vals))\r\n",
					"cats_unique_occurance"
				],
				"execution_count": 26
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"cats_map = ['restaurants',\r\n",
					"'shopping',\r\n",
					"'event planning & services',\r\n",
					"'beauty & spas',\r\n",
					"'local services',\r\n",
					"'active life',\r\n",
					"'health & medical',\r\n",
					"'arts & entertainment',\r\n",
					"'home services']\r\n",
					""
				],
				"execution_count": 27
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"yelp_df['categories_new'] = 'Other'\r\n",
					"for i,row in enumerate(yelp_df['categories']):\r\n",
					"    row = [x.strip() for x in row.lower().split(',')]\r\n",
					"    for cat in cats_map:\r\n",
					"        if cat in row:\r\n",
					"            yelp_df['categories_new'].iloc[i] = cat.capitalize()\r\n",
					"            "
				],
				"execution_count": 28
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"yelp_df['categories_new'].value_counts()"
				],
				"execution_count": 29
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"yelp_df['categories'] = yelp_df['categories_new']"
				],
				"execution_count": 30
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"yelp_df.drop(['categories_new'], axis=1, inplace=True)"
				],
				"execution_count": 31
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"yelp_df.sample(10)"
				],
				"execution_count": 32
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"destpath = 'abfss://data@movielensprojectdatalake.dfs.core.windows.net/ToPresentData'"
				],
				"execution_count": 33
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"spark_yelp_df = spark.createDataFrame(yelp_df)"
				],
				"execution_count": 39
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"spark_yelp_df_single_partition = spark_yelp_df.coalesce(1)"
				],
				"execution_count": 40
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"(spark_yelp_df_single_partition).write\\\r\n",
					"        .mode(\"overwrite\")\\\r\n",
					"        .format('parquet')\\\r\n",
					"        .option('header','true')\\\r\n",
					"        .save(destpath)"
				],
				"execution_count": 41
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"spark_yelp_df_single_partition.write.mode('overwrite').parquet(destpath)\r\n",
					""
				],
				"execution_count": 42
			}
		]
	}
}